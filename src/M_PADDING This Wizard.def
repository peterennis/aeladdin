Option Compare Database
Option Explicit

' Access 2007 supports ADO 2.8 , DAO 12.0
' Access 2010 supports ADO 6.1 , DAO 12.0 (14.0 for DbEngine)

' Things to change betweens Access versions :
' - References: change to the correct Microsoft ActiveX Data Object version (see above)
' - Constant c_vAcceptedAccessVersions: put accepted internal Access versions separated by ;
' Access 2000 => 9.0 , Access 2002 => 10.0 , Access 2003 => 11.0 , Access 2007 => 12.0, Access 2010 => 14.0
' Note: It is better to seperate Access 2002 and 2003 because of a bug (http://support.microsoft.com/kb/897764/en-us/), but it used to be "Access 2002-2003 => 10.0;11.0".

Public Const c_vAcceptedAccessVersions = "14.0"                         'zzz "12.0;14.0"
Public Const c_vVersion = "0.01"
Public Const c_vName = "aeladdin"
' zzz Public Const cz_vFullName0 = c_vName & "(Access %AccVerE%)" ' bug from the 1.50 to 1.52 version
Public Const cz_vFullName = c_vName                                     'zzz & " (Access %AccVerE%)"

Public Const c_vEditor = "adaept"
Public Const cz_vDefaultProgDir = "\" & c_vEditor & "\" & c_vName       'zzz & " %AccVerE%"
Public Const cz_vProgFile = "aeladdinT"                                 'zzz %AccVerE%"
Public Const cz_vDataFile = "aeladdinT"                                 'zzz %AccVerE%-dat"
Public Const c_vMenuPrefixe0 = "aeT - "
Public Const c_vMenuPrefixe1 = "aeT -- "
Public Const c_vToolIdMax = 8
' zzz Public Const c_vDefaultMenuSel = "0;1;2;3;4;5;6;7;8"
Public Const c_vDefaultMenuSel = "0;;;;4;;;;"
Public Const c_vSetupForm = "aeT_SETUP"
Public Const c_LOGFILE = cz_vProgFile & "_LOG_"
Public gstr_LOGFILE As String
Public Const gblnLOG = False
Public Const c_MainForm = "aeT_ABOUT"

' Registry keys
Public Const c_vReg_LocalMachine = "LM"
Public Const c_vReg_ClassesRoot = "CR"
Public Const c_vReg_RootKey = "Software"

Public Const cz_vReg_EditorPath = c_vReg_RootKey & "\" & c_vEditor
Public Const cz_vReg_ProgKey = c_vName                                  'zzz & "%AccVerE%"
Public Const cz_vReg_ProgPath = cz_vReg_EditorPath & "\" & cz_vReg_ProgKey

Public Const cz_vReg_Uninstall = "Software\Microsoft\Windows\CurrentVersion\Uninstall"
Public Const c_vReg_AccessCommand = "Access.Application.%AccVerI%\Shell\Open\Command"
Public Const cz_vReg_AccessAddIns = "Software\Microsoft\Office\%AccVerI%.0\Access\Menu Add-Ins"

' Registry values's name
Public Const c_vReg_Version = "Version"
Public Const c_vReg_ProgDir = "ProgDir"
Public Const c_vReg_DataDir = "DataDir"
Public Const c_vReg_Language = "Language"
Public Const c_vReg_MenuSel = "MenuSelection"

' Keywords for constants
Public Const c_vAccVer_Internal = "%AccVerI%"
Public Const c_vAccVer_External = "%AccVerE%"
Public Const c_vAccVer_Compatible = "%AccVerC%"

Public Function zzzm_AccVer(ByVal str As String) As String
'    This function merges a string with the current Access version (Internal or Extrenal)
    
3       Dim x As String
    
5       If InStr(str, c_vAccVer_Compatible) > 0 Then
6           Dim Lst As Variant
7           Dim i   As Integer
8           x = vbNullString
9           Lst = Split(c_vAcceptedAccessVersions, ";")
10          For i = LBound(Lst) To UBound(Lst)
11              If x <> vbNullString Then
12                  x = x & " - "
13              End If
14              x = x & zzzm_AccVersNum("" & Lst(i), False)
15          Next i
16          x = Replace(str, c_vAccVer_Compatible, x)
17      Else
18          x = str
19      End If
    
21      If InStr(x, c_vAccVer_Internal) > 0 Then
22          x = Replace(x, c_vAccVer_Internal, zzzm_AccVersNum(SysCmd(acSysCmdAccessVer), True))
23      End If
    
25      If InStr(x, c_vAccVer_External) > 0 Then
26          x = Replace(x, c_vAccVer_External, zzzm_AccVersNum(SysCmd(acSysCmdAccessVer), False))
27      End If
    
29      zzzm_AccVer = x
    
End Function

Public Function m_AccExt() As String
'    Returns the extension of the current V-Tools Access file.
2       Dim p As Long
3       p = InStrRev(Application.CodeProject.FullName, ".")
4       If p > 0 Then
5           m_AccExt = Mid$(Application.CodeProject.FullName, p)
6       End If
End Function

Public Function zzzm_AccVersNum(CmdAccessVer As String, Internal As Boolean) As String
    
2       Select Case CmdAccessVer
    Case "14.0" 'Access 2010
4           zzzm_AccVersNum = IIf(Internal, "14", "2010")
5       Case "12.0" 'Access 2007
6           zzzm_AccVersNum = IIf(Internal, "12", "2007")
7       Case "11.0" 'Access 2003
8           zzzm_AccVersNum = IIf(Internal, "11", "2003")
9       Case "10.0" 'Access 2002
10          zzzm_AccVersNum = IIf(Internal, "10", "2002")
11      Case "9.0" 'Access 2000
12          zzzm_AccVersNum = IIf(Internal, "9", "2000")
13      Case "8.0" 'Access 97
14          zzzm_AccVersNum = IIf(Internal, "8", "97")
15      Case Else
16          zzzm_AccVersNum = "? (" & CmdAccessVer & ")"
17      End Select
    
End Function

Public Function m_OpenTool(ToolId As Integer)
    
2       Dim FrmName As String
    
4       On Error GoTo m_OpenTool_Error
    
'    zzz  FrmName = Choose(ToolId + 1, c_MainForm, "Db_ApplySystemColors", "Db_PictureData", "Db_WorkOnQueries", "Db_SearchThrougthObjects", "Db_Spec", "Db_FormTemplate", "Db_PersonalLibrary", "Db_Containers", c_vSetupForm)
7       FrmName = Choose(ToolId + 1, c_MainForm, "Db_SearchThroughObjects", "Form1", "Form2", "Form3", "Form4", "Form5", "Form6", "Form7", "Form8", c_vSetupForm)
    
9       gstr_LOGFILE = f_MyDocuments & "\" & c_LOGFILE & Format(Date, "yyyymmdd") & ".txt"
    
11      If gblnLOG Then
12          Open gstr_LOGFILE For Append As #1
13          Print #1, Date, "Now=" & Now, "m_OpenTool"
14          Print #1, , "ToolId=" & ToolId
15          Print #1, , "FrmName=" & FrmName
16          Close #1
17      End If
    
19      If CodeProject.AllForms(c_MainForm).IsLoaded Then
20          DoCmd.Close acForm, c_MainForm
21      End If
    
23      On Error Resume Next 'This is because in some Forms, the Open event can be cancel if the current Database is an ADP project.
24      If FrmName = c_vSetupForm Then
'        The Setup Form is not modal when the code is not activated (Access 2007), thus it is easy to click on the Activate option.
'        But is should be modal in normal usage.
27          DoCmd.OpenForm FrmName, , , , , acDialog
28      Else
29          DoCmd.OpenForm FrmName
30      End If
    
32      On Error GoTo 0
    Exit Function
    
35 m_OpenTool_Error:
    
37      MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure m_OpenTool of Module This Wizard"
    
End Function

Public Function m_ProgDir(Optional HKey As Long) As String
'    Returns the Program (V) Directory
    
3       Dim Folder As String
    
5       Debug.Print "HKey=" & HKey
6       If HKey = 0 Then
'        zzz        Folder = "" & m_Reg_ValueGetQuick(c_vReg_LocalMachine, m_AccVer(cz_vReg_ProgPath), c_vReg_ProgDir)
8           Folder = "" & m_Reg_ValueGetQuick(c_vReg_LocalMachine, cz_vReg_ProgPath, c_vReg_ProgDir)
9       Else
10          Folder = "" & m_Reg_ValueGet(HKey, c_vReg_ProgDir)
11      End If
    
13      m_ProgDir = Folder
    
End Function

Public Function m_MenuSel_Get(Optional HKey As Long) As String
'    Returns the current menu selection
'    If a HKey is given, it means the correct Registry Key is already open with this Handle.
    
4       Dim MenuSel As String
    
6       If HKey = 0 Then
'        zzz        MenuSel = "" & m_Reg_ValueGetQuick(c_vReg_LocalMachine, m_AccVer(cz_vReg_ProgPath), c_vReg_MenuSel)
8           MenuSel = "" & m_Reg_ValueGetQuick(c_vReg_LocalMachine, cz_vReg_ProgPath, c_vReg_MenuSel)
9       Else
10          MenuSel = "" & m_Reg_ValueGet(HKey, c_vReg_MenuSel)
11      End If
    
13      If MenuSel = "" Then
14          MenuSel = c_vDefaultMenuSel
15      End If
    
17      m_MenuSel_Get = MenuSel
    
End Function

Public Function m_MenuSel_Set(NewLanguage As Integer, NewMenuSel As String, Optional HKeyV As Long, Optional ForceRefresh As Boolean)
'    Actualize the add-in Menu items
    
3       Const c_Sep = ";"
    
5       Dim HKey        As Long
6       Dim OldLanguage As Integer
7       Dim OldMenuSel  As String
8       Dim ProgPath    As String
9       Dim i           As Integer
    
11      On Error GoTo m_MenuSel_Set_Error
    
13      If HKeyV = 0 Then
'        zzz        HKey = m_Reg_KeyOpen(c_vReg_LocalMachine, m_AccVer(cz_vReg_ProgPath))
15          HKey = m_Reg_KeyOpen(c_vReg_LocalMachine, cz_vReg_ProgPath)
16      Else
17          HKey = HKeyV
18      End If
    
'    Get old values and save with new one
    
22      OldLanguage = Val("0" & m_Reg_ValueGet(HKey, c_vReg_Language)) 'm_DefaultLanguage(HKey)
23      If NewLanguage <> OldLanguage Then
24          m_Reg_ValueSet HKey, c_vReg_Language, "" & NewLanguage, REG_SZ
25      End If
    
27      OldMenuSel = "" & m_Reg_ValueGet(HKey, c_vReg_MenuSel) 'm_MenuSel_Get(HKey)
28      If OldMenuSel <> NewMenuSel Then
29          m_Reg_ValueSet HKey, c_vReg_MenuSel, NewMenuSel, REG_SZ
30      End If
    
32      ProgPath = m_ProgDir(HKey)
'    zzz    ProgPath = m_Folder_CheckEnd(ProgPath, True) & m_AccVer(cz_vProgFile) & m_AccExt()
34      ProgPath = m_Folder_CheckEnd(ProgPath, True) & cz_vProgFile & m_AccExt()
    
36      If HKeyV = 0 Then
37          m_Reg_KeyClose HKey
38      End If
    
'    First verifying if there is something to modify
41      If (NewLanguage <> OldLanguage) Or (NewMenuSel <> OldMenuSel) Or (ForceRefresh = True) Then
        
'        zzz        HKey = m_Reg_KeyOpen(c_vReg_LocalMachine, m_AccVer(cz_vReg_AccessAddIns))
44          HKey = m_Reg_KeyOpen(c_vReg_LocalMachine, cz_vReg_AccessAddIns)
        
46          If HKey <> 0 Then
            
48              Dim SelId  As String
49              Dim DelOK  As Boolean
50              Dim AddOk  As Boolean
51              Dim HKeyM  As Long
52              Dim OldLst As Variant
53              Dim NewLst As Variant
            
55              OldLst = m_ToolList(OldLanguage, True)
56              NewLst = m_ToolList(NewLanguage, True)
57              NewMenuSel = c_Sep & NewMenuSel & c_Sep
            
59              For i = 0 To c_vToolIdMax
                
61                  SelId = c_Sep & i & c_Sep
                
63                  If ForceRefresh = True Then
64                      m_Reg_KeyDelete HKey, vbNullString & OldLst(i)
65                      m_Reg_KeyDelete HKey, vbNullString & NewLst(i)
66                      AddOk = (InStr(NewMenuSel, SelId) > 0)
67                  Else
'                    Look if deleting old item is necessary
69                      If OldLanguage = 0 Then
70                          DelOK = False
71                      Else
72                          If InStr(OldMenuSel, SelId) = 0 Then
73                              DelOK = False
74                          Else
75                              DelOK = (NewLanguage <> OldLanguage) Or (InStr(NewMenuSel, SelId) = 0)
76                          End If
77                      End If
'                    Look if adding new item is necessary
79                      If NewLanguage = 0 Then
80                          AddOk = False
81                      Else
82                          If InStr(NewMenuSel, SelId) = 0 Then
83                              AddOk = False
84                          Else
85                              AddOk = (NewLanguage <> OldLanguage) Or (InStr(OldMenuSel, SelId) = 0)
86                          End If
87                      End If
'                    Delete the old item
89                      If DelOK Then
90                          m_Reg_KeyDelete HKey, vbNullString & OldLst(i)
91                      End If
92                  End If
                
'                Add the new item
95                  If AddOk Then
'                    zzz                    HKeyM = m_Reg_KeyCreate(c_vReg_LocalMachine, m_AccVer(cz_vReg_AccessAddIns) & "\" & NewLst(i))
97                      HKeyM = m_Reg_KeyCreate(c_vReg_LocalMachine, cz_vReg_AccessAddIns & "\" & NewLst(i))
98                      If HKeyM <> 0 Then
99                          m_Reg_ValueSet HKeyM, "Library", ProgPath, REG_SZ
100                         m_Reg_ValueSet HKeyM, "Expression", "=m_OpenTool(" & i & ")", REG_SZ
101                         m_Reg_ValueSet HKeyM, "Version", "3", REG_SZ
102                         m_Reg_KeyClose HKeyM
103                     End If
104                 End If
                
106             Next i
            
108             m_Reg_KeyClose HKey
109             Application.ReloadAddIns
110             DoEvents
            
112         End If
        
114     End If
    
116     On Error GoTo 0
    Exit Function
    
119 m_MenuSel_Set_Error:
    
121     MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure m_MenuSel_Set of Module This Wizard"
    
End Function

Public Sub m_Debug_OpenUsysTables()
'    For debuging purpose only: open User System tables, which are hidden by default
    
3       Const c_Pref = "USYS"
4       Dim TblName As String
    
6       Dim i As Long
7       For i = 0 To CodeDb.TableDefs.count - 1
8           TblName = CodeDb.TableDefs(i).Name
9           If Left$(TblName, Len(c_Pref)) = c_Pref Then
10              DoCmd.OpenTable TblName, acViewNormal
11          End If
12      Next i
    
End Sub

Public Sub m_Debug_DisplayVersions()
'    For debuging purpose only: display the versions of Access, ADO and DAO
    
3       Debug.Print "Access version = " & Application.VERSION
4       Debug.Print "ADO (ActiveX Data Object) version = " & CurrentProject.Connection.VERSION
5       Debug.Print "DAO (DbEngine)  version = " & Application.DBEngine.VERSION
6       Debug.Print "DAO (CodeDb)    version = " & Application.CodeDb.VERSION
7       Debug.Print "DAO (CurrentDb) version = " & Application.CurrentDb.VERSION
    
End Sub