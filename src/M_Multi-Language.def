Option Compare Database
Option Explicit

' Const dbOpenForwardOnly = 8
' Const dbReadOnly = 4
' Const dbOpenSnapshot = 4

Const c_LanguageNotSet = 0      ' The language is not set yet
Const c_DevLanguage = -1        ' Form's language as it has been created
Const c_NbrLang = 5

Global g_CurrentLanguage As Integer ' Language currently applied to the last open tool
Global g_DefaultLanguage As Integer ' Language to apply to a tool when it is open
Global Const c_LanguagePopup = "cm_VTools_LanguagePopup"

Private Declare Function GetUserDefaultUILanguage Lib "kernel32" () As Long

Public Function m_ApplyLanguageF(Frm As Object, Optional Language As Variant)
'    Must be a function to be called by menus
'    Note: Frm is set as Object instead of Form because is makes a type mistake with DB_SETUP and Access 2000
    
4       Dim IsSetupForm As Boolean
    
6       On Error GoTo m_ApplyLanguageF_Error
    
8       If gblnLOG Then
9           Open gstr_LOGFILE For Append As #1
10          Print #1, Date, "Now=" & Now, "m_ApplyLanguageF"
11          Print #1, , "Frm.Name=" & Frm.Name
12          If IsMissing(Language) Then
13              Print #1, , "Language=IsMissing"
14          Else
15              Print #1, , "Language=" & Language
16          End If
17          Print #1, , "m_DefaultLanguage()=" & m_DefaultLanguage()
18          Print #1, , "c_DevLanguage=" & c_DevLanguage
19          Print #1, , "c_vSetupForm=" & c_vSetupForm
20          Print #1, , "c_vName=" & c_vName
21          Print #1, , "c_vVersion=" & c_vVersion
22          Print #1, , "Frm.Tag=" & Frm.Tag
23          Close #1
24      End If
    
26      IsSetupForm = (Frm.Name = c_vSetupForm)
    
28      If IsMissing(Language) Then
29          g_CurrentLanguage = m_DefaultLanguage()
30      Else
31          g_CurrentLanguage = Language
32      End If
    
34      If g_CurrentLanguage <> c_DevLanguage Then
        
36          Dim rs  As New ADODB.Recordset
37          Dim Txt As String
        
39          With rs
40              .Open "SELECT S_ObjectType,S_ObjectName,S_ObjectProperty,S_Language_" & g_CurrentLanguage & " AS Txt FROM USysMultiLanguage WHERE (S_ObjectParent='" & Frm.Name & "')", CodeProject.Connection, adOpenForwardOnly
41              Do Until .EOF
42                  Txt = Nz(!Txt, "???")
43                  Txt = Replace(Txt, "%vName%", c_vName)
44                  Txt = Replace(Txt, "%vVers%", c_vVersion)
45                  If IsSetupForm Then
'                    zzz                    Txt = m_AccVer(Txt)
47                      Txt = Replace(Txt, "%vRegVers%", Frm.Tag)
48                  End If
49                  Select Case !S_ObjectType
                Case "F"
51                      Frm.Properties(!S_ObjectProperty) = Txt
52                  Case "FC"
53                      Frm.Controls(!S_ObjectName).Properties(!S_ObjectProperty) = Txt
54                  End Select
55                  .MoveNext
56              Loop
57              .Close
58          End With
        
60      End If
    
62      If gblnLOG Then
63          Open gstr_LOGFILE For Append As #1
64          Print #1, Date, "Now=" & Now, "END> m_ApplyLanguageF"
65          Close #1
66      End If
    
68      On Error GoTo 0
    Exit Function
    
71 m_ApplyLanguageF_Error:
    
73      MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure m_ApplyLanguageF of Module Multi-Language"
    
End Function

Public Function m_ToolList(Optional Language As Integer, Optional WithPrefixe As Boolean) As Variant
'    Returns a variant wich is an array containing the tool labels.
'    Used for registry and in the Reception Form.
    
4       Dim i As Integer
5       Dim Lst(0 To c_vToolIdMax)
6       Dim rs  As New ADODB.Recordset
7       Dim Txt As String
    
9       On Error GoTo m_ToolList_Error
    
11      If Language = 0 Then
12          i = m_DefaultLanguage()
13      Else
14          i = Language
15      End If
    
17      With rs
18          rs.Open "SELECT S_ObjectName,S_Language_" & i & " AS Txt FROM USysMultiLanguage WHERE (S_ObjectParent='Sys') AND (S_ObjectType='TT')", CodeProject.Connection, adOpenForwardOnly
19          Do Until .EOF
20              i = Val(!S_ObjectName)
21              Txt = !Txt
22              If WithPrefixe = True Then
23                  If i = 0 Then
24                      Txt = c_vMenuPrefixe0 & Txt
25                  Else
26                      Txt = c_vMenuPrefixe1 & Txt
27                  End If
28              End If
29              Lst(i) = Txt
30              .MoveNext
31          Loop
32          .Close
33      End With
    
35      m_ToolList = Lst()
    
    
38      On Error GoTo 0
    Exit Function
    
41 m_ToolList_Error:
    
43      MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure m_ToolList of Module Multi-Language"
    
End Function

Public Function m_CurrentLanguage() As Integer
    
'    If Current Language Code is not set, the value is taken from the Default Language.
3       If g_CurrentLanguage = c_LanguageNotSet Then
4           g_CurrentLanguage = m_DefaultLanguage()
5       End If
    
7       m_CurrentLanguage = g_CurrentLanguage
    
End Function

Public Function m_DefaultLanguage(Optional HKey As Long) As Integer
    
'    If Default Language Code is not set, the value is taken from the Registry.
3       If g_DefaultLanguage = c_LanguageNotSet Then
4           If HKey = 0 Then
'            zzz            g_DefaultLanguage = Val("" & m_Reg_ValueGetQuick(c_vReg_LocalMachine, m_AccVer(cz_vReg_ProgPath), c_vReg_Language))
6               g_DefaultLanguage = Val("" & m_Reg_ValueGetQuick(c_vReg_LocalMachine, cz_vReg_ProgPath, c_vReg_Language))
7           Else
8               g_DefaultLanguage = Val(m_Reg_ValueGet(HKey, c_vReg_Language))
9           End If
10      End If
    
'    If the language has not been determinated, we take the default language
13      If g_DefaultLanguage = c_LanguageNotSet Then
14          g_DefaultLanguage = m_WindowsLanguage()
15      End If
    
17      m_DefaultLanguage = g_DefaultLanguage
    
End Function

Public Function m_ChangeLanguage(NewLanguage As Integer)
    
'    zzz    m_Reg_ValueSetQuick c_vReg_LocalMachine, m_AccVer(cz_vReg_ProgPath), c_vReg_Language, ("" & NewLanguage), REG_SZ
3       m_Reg_ValueSetQuick c_vReg_LocalMachine, cz_vReg_ProgPath, c_vReg_Language, ("" & NewLanguage), REG_SZ
4       g_CurrentLanguage = NewLanguage
    
End Function

Public Function m_MsgBox(ObjectParent As String, ObjectName As String, Buttons As VbMsgBoxStyle, ParamArray Params() As Variant) As VbMsgBoxResult 'Integer
'    Prompts a Message Box depending to the current language.
    
3       Const c_Joker = "%"
    
5       Dim rs     As New ADODB.Recordset
6       Dim i      As Integer
7       Dim Txt    As String
8       Dim xTitle As String
9       Dim xBody  As String
    
11      On Error GoTo m_MsgBox_Error
    
13      If gblnLOG Then
14          Open gstr_LOGFILE For Append As #1
15          Print #1, Date, "Now=" & Now, "m_MsgBox"
16          Close #1
17      End If
    
19      i = m_CurrentLanguage()
    
21      If ObjectName = vbNullString Then
22          rs.Open "SELECT S_ObjectProperty,S_Language_" & i & " AS Txt FROM USysMultiLanguage WHERE (S_ObjectParent='" & ObjectParent & "') AND (S_ObjectType='M')", CodeProject.Connection, adOpenForwardOnly
23      Else
24          rs.Open "SELECT S_ObjectProperty,S_Language_" & i & " AS Txt FROM USysMultiLanguage WHERE (S_ObjectParent='" & ObjectParent & "') AND (S_ObjectType='M') AND (S_ObjectName='" & ObjectName & "')", CodeProject.Connection, adOpenForwardOnly
25      End If
    
27      xBody = "<message not found>"
28      xTitle = "<title not found>"
    
30      With rs
31          Do Until .EOF
'            Get the text
33              Txt = Nz(!Txt)
'            Replace the jokeys with the parameters
35              For i = LBound(Params) To UBound(Params)
36                  Txt = Replace(Txt, c_Joker & (i + 1) & c_Joker, vbNullString & Params(i))
37              Next i
38              Txt = Replace(Txt, "%VName%", c_vName)
39              Txt = Replace(Txt, "%VVers%", c_vVersion)
'            Save in variables
41              Select Case !S_ObjectProperty
            Case "Body"
43                  xBody = Txt
44              Case "Title"
45                  xTitle = Txt
46              End Select
47              .MoveNext
48          Loop
49          .Close
50      End With
    
52      m_MsgBox = MsgBox(xBody, Buttons, xTitle)
    
54      If gblnLOG Then
55          Open gstr_LOGFILE For Append As #1
56          Print #1, Date, "Now=" & Now, "END> m_MsgBox"
57          Print #1, , "ObjectParent=" & ObjectParent
58          Print #1, , "ObjectName=" & ObjectName
59          For i = LBound(Params) To UBound(Params)
60              Print #1, , "Params(" & i & ")=" & Params(i)
61          Next i
62          Print #1, , "xBody=" & xBody
63          Print #1, , "xTitle=" & xTitle
64          Print #1, , "c_vSetupForm=" & c_vSetupForm
65          Print #1, , "c_vName=" & c_vName
66          Print #1, , "c_vVersion=" & c_vVersion
67          Close #1
68      End If
    
70      On Error GoTo 0
    Exit Function
    
73 m_MsgBox_Error:
    
75      MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure m_MsgBox of Module Multi-Language"
    
End Function

Public Function m_GetText(ObjectParent As String, Optional ObjectName As String, Optional Language As Integer) As String
'    Returns the texte from the String Table depending to the current language.
'    [ObjectParent] is not optional, it's the key for standart text information.
'    But if it's easier to let the Form name for a label, ObjectName can be precised.
    
5       Dim rs  As New ADODB.Recordset
6       Dim Col As String
7       Dim Txt As String
    
9       On Error GoTo m_GetText_Error
    
11      Select Case Language
    Case -1
13          Col = "S_ObjectProperty"
14      Case 0
15          Col = "S_Language_" & m_CurrentLanguage()
16      Case Else
17          Col = "S_Language_" & Language
18      End Select
    
20      With rs
        
22          If ObjectName = "" Then
23              .Open "SELECT * FROM USysMultiLanguage WHERE (S_ObjectParent='" & ObjectParent & "')", CodeProject.Connection, adOpenForwardOnly
24          Else
25              .Open "SELECT * FROM USysMultiLanguage WHERE (S_ObjectParent='" & ObjectParent & "') AND (S_ObjectName='" & ObjectName & "')", CodeProject.Connection, adOpenForwardOnly
26          End If
        
28          If .EOF Then
29              Txt = "<" & ObjectParent & "." & ObjectName & ": translation not found>"
30          Else
31              Txt = vbNullString & .Fields(Col).Value
32              Txt = Replace(Txt, "%VName%", c_vName)
33              Txt = Replace(Txt, "%VVers%", c_vVersion)
34          End If
        
36          .Close
        
38      End With
    
40      m_GetText = Txt
    
    
43      On Error GoTo 0
    Exit Function
    
46 m_GetText_Error:
    
48      MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure m_GetText of Module Multi-Language"
    
End Function

Public Function m_LanguagePopup()
'    Show the language popup
    
3       On Error Resume Next
4       CommandBars(c_LanguagePopup).ShowPopup
    
End Function

Public Function m_WindowsLanguage() As Integer
'    Language used by the current Windows configuration
    
3       Dim LId As Long
4       Dim Vid As Integer
    
6       LId = GetUserDefaultUILanguage()
'    http://msdn2.microsoft.com/en-us/library/ms776324(VS.85).aspx
'    http://msdn2.microsoft.com/en-us/library/ms776208(VS.85).aspx
    
10      Select Case Right$(Hex$(LId), 2) ' The primary language is part of the Language Identifier
    Case "0C": Vid = 2 ' French
12      Case "07": Vid = 3 ' German
13      Case "16": Vid = 4 ' Portuguese
14      Case "11": Vid = 5 ' Japanese
15      Case Else: Vid = 1 ' English
16      End Select
    
18      m_WindowsLanguage = Vid
    
End Function