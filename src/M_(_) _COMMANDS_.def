Option Compare Database
Option Explicit

Public gobjRibbon As IRibbonUI

' Error 438:
' Public Function New_aeNumClass() As aeNumClass
' Ref: http://support.microsoft.com/kb/555159#top
' ====================================================================
' Author:   Peter F. Ennis
' Date:     March 31, 2011
' Comment:  Instantiation of PublicNotCreatable aeNumClass
' Requires: aeNumClass Instancing 2 - PublicNotCreatable
' ====================================================================
' Set New_aeNumClass = New aeNumClass
' End Function



' ==========================================================
' aeRibbon Callbacks
' ==========================================================
' Ref: http://msdn.microsoft.com/en-us/library/aa433869.aspx
' Reference for Access 2010: "Microsoft Office 14.0 Object Library"
' xmlns="http://schemas.microsoft.com/office/2009/07/customui"
' Reference for Access 2007: "Microsoft Office 12.0 Object Library"
' xmlns="http://schemas.microsoft.com/office/2006/01/customui"

Public Sub aeMyAddinInitialize(ribbon As IRibbonUI)
'    Callback name for XML "onLoad"
2       Set gobjRibbon = ribbon
End Sub

' Button
Public Function aeNtryPoint(strControl As String, strAction As String)
'    Callback name for XML "onAction"
    
3       Select Case strControl
        
    Case "btn1"
6           aeClassInfo
        
8       Case "btn2"
9           aeListModules
        
11      Case "btn3"
12          aeRenumber
        
14      Case "btn4"
15          aeRunTheSearch
        
17      Case Else
18          MsgBox "Button """ & strControl & """ clicked", vbInformation, "aeNtryPoint"
19      End Select
    
End Function

Private Function aeClassInfo(Optional strModuleName As Variant)
    
2       On Error GoTo aeClassInfo_Error
    
4       ShowVBA strModuleName
5       MyClassInformation
    
7       On Error GoTo 0
    Exit Function
    
10 aeClassInfo_Error:
    
12      MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure aeClassInfo of Module (_) _COMMANDS_"
    
End Function

Private Function aeListModules()
1       ShowVBA "(_) _COMMANDS_"
2       MyListModules
End Function

Private Function aeRenumber()
1       ShowVBA "(_) _COMMANDS_"
2       MyRenumber
End Function

Private Function aeRunTheSearch()
1       DoCmd.OpenForm "Db_SearchThroughObjects"
End Function

Private Function MyClassInformation()
1       Dim objNumClass As aeNumClass
2       Set objNumClass = New aeNumClass
End Function

Private Sub ShowVBA(Optional strModuleName As Variant)
'    Ref: http://www.officekb.com/Uwe/Forum.aspx/excel-prog/165815/Open-VBA-Editor
2       On Error GoTo ShowVBA_Error
    
4       If Application.VBE.MainWindow.visible = False Then
5           Application.VBE.MainWindow.visible = True
6       End If
    
8       If IsMissing(strModuleName) Then
'        Ref: http://msdn.microsoft.com/en-us/library/aa443989(v=vs.60).aspx
10          Set Application.VBE.ActiveCodePane = Application.VBE.CodePanes(1)
11          Application.VBE.ActiveCodePane.Show
12      Else
13          Application.VBE.ActiveVBProject.VBComponents(strModuleName).CodeModule.CodePane.Show
14      End If
    
16      On Error GoTo 0
    Exit Sub
    
19 ShowVBA_Error:
    
21      MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.description & ") in procedure ShowVBA of Module (_) _COMMANDS_"
    
End Sub

Private Function MySkipModule()
    
2       Dim objNumClass As aeNumClass
3       Set objNumClass = New aeNumClass
4       Dim str As String
    
6       str = objNumClass.aeSkipModule
7       Debug.Print "MySkipModule:aeSkipModule>" & objNumClass.aeSkipModule
    
End Function

Private Function MyClassName()
    
2       Dim objNumClass As aeNumClass
3       Set objNumClass = New aeNumClass
    
5       Dim str As String
    
7       str = objNumClass.aeMyClassName
8       Debug.Print "MyClassName:str>" & str
    
End Function

Private Function MyRenumber()
    
2       Dim objNumClass As aeNumClass
3       Set objNumClass = New aeNumClass
    
5       Dim bln As Boolean
    
7       bln = objNumClass.aeReNumAutoIndent
    
End Function

Private Function MyListModules()
    
2       Dim objNumClass As aeNumClass
3       Set objNumClass = New aeNumClass
    
5       Dim astr() As String
    
7       objNumClass.aeDebugIt = True
8       astr = objNumClass.aeGetListCodeModules
    
End Function

Private Sub TestAll()
    
2       Dim objNumClass As aeNumClass
3       Set objNumClass = New aeNumClass
    
5       Dim str As String
6       str = objNumClass.aeSkipModule
7       Debug.Print "TestAll MySkipModule:aeSkipModule>" & str
    
9       str = objNumClass.aeMyClassName
10      Debug.Print "TestAll MyClassName:str>" & str
    
'    Exit Sub
    
14      Dim bln As Boolean
15      bln = objNumClass.aeReNumAutoIndent
16      Debug.Print "TestAll objNumClass.aeReNumAutoIndent Finished"
    
18      Dim lng As Long
19      lng = objNumClass.aeCountLines
20      Debug.Print "TestAll objNumClass.aeCountLines Finished"
    
22      Dim astr() As String
23      astr = objNumClass.aeGetListCodeModules
24      objNumClass.aeDebugIt = True
25      astr = objNumClass.aeGetListCodeModules
26      Debug.Print "TestAll objNumClass.aeGetListCodeModules Finished"
    
End Sub