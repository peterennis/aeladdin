Option Compare Database
Option Explicit

' NOTE: This will not work in mde, accde files. It has to be in a regular module

' Purpose:   Count the number of lines of code in your database.
' Author:    Allen Browne (allen@allenbrowne.com)
' Release:   26 November 2007
' Copyright: None. You may use this and modify it for any database you write.
' All we ask is that you acknowledge the source (leave these comments in your code.)
' Documentation: http://allenbrowne.com/vba-CountLines.html

' For Count Lines
Private Const micVerboseSummary = 1
Private Const micVerboseListAll = 2

Public Function CountLines(Optional iVerboseLevel As Integer = 3) As Long
1       On Error GoTo Err_Handler
'    Purpose:   Count the number of lines of code in modules of current database.
'    Requires:  Access 2000 or later.
'    Argument:  This number is a bit field, indicating what should print to the Immediate Window:
'    0 displays nothing
'    1 displays a summary for the module type (form, report, stand-alone.)
'    2 list the lines in each module
'    3 displays the summary and the list of modules.
'    Notes:     Code will error if dirty (i.e. the project is not compiled and saved.)
'    Just click Ok if a form/report is assigned to a non-existent printer.
'    Side effect: all modules behind forms and reports will be closed.
'    Code window will flash, since modules cannot be opened hidden.
13      Dim accObj As AccessObject  'Each module/form/report.
14      Dim strDoc As String        'Name of each form/report
15      Dim lngObjectCount As Long  'Number of modules/forms/reports
16      Dim lngObjectTotal As Long  'Total number of objects.
17      Dim lngLineCount As Long    'Number of lines for this object type.
18      Dim lngLineTotal As Long    'Total number of lines for all object types.
19      Dim bWasOpen As Boolean     'Flag to leave form/report open if it was open.
    
'    Stand-alone modules.
22      lngObjectCount = 0&
23      lngLineCount = 0&
24      For Each accObj In CurrentProject.AllModules
'        OPTIONAL: TO EXCLUDE THE CODE IN THIS MODULE FROM THE COUNT:
'        a) Uncomment the If ... and End If lines (3 lines later), by removing the single-quote.
'        b) Replace MODULE_NAME with the name of the module you saved this in (e.g. "Module1")
'        c) Check that the code compiles after your changes (Compile on Debug menu.)
'        If accObj.Name <> "MODULE_NAME" Then
30          lngObjectCount = lngObjectCount + 1&
31          lngLineCount = lngLineCount + GetModuleLines(accObj.Name, True, iVerboseLevel)
'        End If
        
34      Next
35      lngLineTotal = lngLineTotal + lngLineCount
36      lngObjectTotal = lngObjectTotal + lngObjectCount
37      If (iVerboseLevel And micVerboseSummary) <> 0 Then
38          Debug.Print lngLineCount & " line(s) in " & lngObjectCount & " stand-alone module(s)"
39      End If
    
'    Modules behind forms.
42      lngObjectCount = 0&
43      lngLineCount = 0&
44      For Each accObj In CurrentProject.AllForms
45          strDoc = accObj.Name
46          bWasOpen = accObj.IsLoaded
47          If Not bWasOpen Then
48              DoCmd.OpenForm strDoc, acDesign, WindowMode:=acHidden
49          End If
50          If Forms(strDoc).HasModule Then
51              lngObjectCount = lngObjectCount + 1&
'            Debug.Print "CountLines 'Form_' & strDoc>" & "Form_" & strDoc
53              lngLineCount = lngLineCount + GetModuleLines("Form_" & strDoc, False, iVerboseLevel)
54          End If
55          If Not bWasOpen Then
56              DoCmd.Close acForm, strDoc, acSaveNo
57          End If
58      Next
59      lngLineTotal = lngLineTotal + lngLineCount
60      lngObjectTotal = lngObjectTotal + lngObjectCount
61      If (iVerboseLevel And micVerboseSummary) <> 0 Then
62          Debug.Print lngLineCount & " line(s) in " & lngObjectCount & " module(s) behind forms"
63      End If
    
'    Modules behind reports.
66      lngObjectCount = 0&
67      lngLineCount = 0&
68      For Each accObj In CurrentProject.AllReports
69          strDoc = accObj.Name
70          bWasOpen = accObj.IsLoaded
71          If Not bWasOpen Then
'            In Access 2000, remove the ", WindowMode:=acHidden" from the next line.
73              DoCmd.OpenReport strDoc, acDesign, WindowMode:=acHidden
74          End If
75          If Reports(strDoc).HasModule Then
76              lngObjectCount = lngObjectCount + 1&
77              lngLineCount = lngLineCount + GetModuleLines("Report_" & strDoc, False, iVerboseLevel)
78          End If
79          If Not bWasOpen Then
80              DoCmd.Close acReport, strDoc, acSaveNo
81          End If
82      Next
83      lngLineTotal = lngLineTotal + lngLineCount
84      lngObjectTotal = lngObjectTotal + lngObjectCount
85      If (iVerboseLevel And micVerboseSummary) <> 0 Then
86          Debug.Print lngLineCount & " line(s) in " & lngObjectCount & " module(s) behind reports"
87          Debug.Print lngLineTotal & " line(s) in " & lngObjectTotal & " module(s)"
88      End If
    
90      CountLines = lngLineTotal
    
92 Exit_Handler:
    Exit Function
    
95 Err_Handler:
96      Select Case Err.Number
    Case 29068&     'This error actually occurs in GetModuleLines()
98          MsgBox "Erl=" & Erl & " Cannot complete operation." & vbCrLf & "Make sure code is compiled and saved.", vbCritical, "Function CountLines"
99      Case Else
100         MsgBox "Erl=" & Erl & " Error " & Err.Number & ": " & Err.description, vbInformation, "Function CountLines"
101     End Select
102     Resume Exit_Handler
End Function

Private Function GetModuleLines(strModule As String, bIsStandAlone As Boolean, iVerboseLevel As Integer) As Long
'    Usage:     Called by CountLines().
'    Note:      Do not use error handling: must pass error back to parent routine.
3       Dim bWasOpen As Boolean     'Flag applies to standalone modules only.
    
5       If bIsStandAlone Then
6           bWasOpen = CurrentProject.AllModules(strModule).IsLoaded
7       End If
8       If Not bWasOpen Then
9           DoCmd.OpenModule strModule
10      End If
11      If (iVerboseLevel And micVerboseListAll) <> 0 Then
12          Debug.Print Modules(strModule).CountOfLines, strModule
13      End If
14      GetModuleLines = Modules(strModule).CountOfLines
15      If Not bWasOpen Then
16          DoCmd.Close acModule, strModule, acSaveYes
17      End If
End Function